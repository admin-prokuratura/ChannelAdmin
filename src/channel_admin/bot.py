"""Executable Telegram bot wiring for the Channel Admin service."""

from __future__ import annotations
import html
import logging
import os
from datetime import datetime, timedelta
from pathlib import Path
from urllib.parse import urlparse

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.error import TelegramError
from telegram.ext import (
    AIORateLimiter,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from dotenv import load_dotenv

from .config import FilterConfig, PricingConfig
from .services import ChannelEconomyService
from .storage import AbstractStorage, InMemoryStorage, JsonStorage
from .payments import CryptoPayClient, CryptoPayError
from .models import BotSettings, Invoice, Ticket, utcnow

LOGGER = logging.getLogger(__name__)


load_dotenv()


def _parse_int_env(name: str) -> int | None:
    raw = os.environ.get(name)
    if not raw:
        return None
    try:
        return int(raw)
    except ValueError:
        LOGGER.warning("Environment variable %s must be an integer (got %r)", name, raw)
        return None


def _parse_float_env(name: str) -> float | None:
    raw = os.environ.get(name)
    if not raw:
        return None
    try:
        normalized = raw.replace(",", ".")
        return float(normalized)
    except ValueError:
        LOGGER.warning("Environment variable %s must be a number (got %r)", name, raw)
        return None


def _parse_admin_ids(raw: str | None) -> set[int]:
    if not raw:
        return set()
    admin_ids: set[int] = set()
    for chunk in raw.split(","):
        chunk = chunk.strip()
        if not chunk:
            continue
        try:
            admin_ids.add(int(chunk))
        except ValueError:
            LOGGER.warning("Skipping invalid admin id %r", chunk)
    return admin_ids


ADMIN_USER_IDS: set[int] = _parse_admin_ids(os.environ.get("ADMIN_USER_IDS"))
TELEGRAM_CHANNEL_ID: int | None = _parse_int_env("TELEGRAM_CHANNEL_ID")
TELEGRAM_CHAT_ID: int | None = _parse_int_env("TELEGRAM_CHAT_ID")
AUTOPOST_INTERVAL_SECONDS: int = max(int(os.environ.get("AUTOPOST_INTERVAL_SECONDS", "60")), 10)
PAID_INVOICE_STATUSES: set[str] = {"paid", "completed"}
JSON_STORAGE_PATH: str | None = os.environ.get("JSON_STORAGE_PATH")
DEFAULT_JSON_STORAGE_PATH = Path.home() / ".channel_admin" / "storage.json"
GOLDEN_CARD_PRESETS: tuple[int, ...] = (12, 24, 72)


def _format_rubles(amount: float | None) -> str:
    if amount is None:
        return ""
    formatted = f"{amount:.2f}".rstrip("0").rstrip(".")
    return formatted or "0"


def _subscription_link(settings: BotSettings) -> str | None:
    if settings.subscription_invite_link:
        return settings.subscription_invite_link
    chat_id = settings.subscription_chat_id
    if not chat_id:
        return None
    if isinstance(chat_id, str) and chat_id.startswith("@"):
        slug = chat_id[1:]
        return f"https://t.me/{slug}" if slug else None
    if isinstance(chat_id, str) and not chat_id.startswith("-"):
        return f"https://t.me/{chat_id}"
    return None


def _parse_subscription_input(raw: str) -> tuple[str, str | None]:
    cleaned = raw.strip()
    if not cleaned:
        raise ValueError("–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username, —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")

    parts = cleaned.split()
    chat_candidate: str | None = None
    link_candidate: str | None = None

    for part in parts:
        if part.startswith(("http://", "https://")):
            link_candidate = part
        elif chat_candidate is None:
            chat_candidate = part

    chat_id: str | None = None
    invite_link: str | None = link_candidate

    if invite_link:
        parsed = urlparse(invite_link)
        slug = parsed.path.strip("/")
        if parsed.netloc in {"t.me", "telegram.me"} and slug and not slug.startswith("+"):
            chat_id = f"@{slug}"

    if chat_candidate:
        candidate = chat_candidate
        if candidate.startswith("@"):
            chat_id = candidate
        elif candidate.lstrip("-").isdigit():
            chat_id = candidate
        else:
            chat_id = f"@{candidate}"

    if chat_id is None:
        raise ValueError(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞. "
            "–£–∫–∞–∂–∏—Ç–µ @username, —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/..."
        )

    if invite_link is None and chat_id.startswith("@"):
        invite_link = f"https://t.me/{chat_id[1:]}" if len(chat_id) > 1 else None

    return chat_id, invite_link


async def send_subscription_prompt(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    settings: BotSettings,
    *,
    error: str | None = None,
) -> None:
    link = _subscription_link(settings)
    channel_label = settings.subscription_invite_link or settings.subscription_chat_id or "–∫–∞–Ω–∞–ª—É"
    lines = [
        "üîí <b>–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>",
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        f"–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º: <b>{html.escape(str(channel_label))}</b>.",
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
    ]
    if error:
        lines.append("")
        lines.append(f"‚ö†Ô∏è {html.escape(error)}")

    keyboard_rows: list[list[InlineKeyboardButton]] = []
    if link:
        keyboard_rows.append([InlineKeyboardButton("üì¢ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=link)])
    keyboard_rows.append(
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="action:check_subscription")]
    )

    text = "\n\n".join(lines)
    markup = InlineKeyboardMarkup(keyboard_rows)

    if update.callback_query:
        await update.callback_query.message.edit_text(
            text,
            reply_markup=markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
    elif update.message:
        await update.message.reply_text(
            text,
            reply_markup=markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )


async def ensure_subscription(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    show_prompt: bool = True,
) -> bool:
    ensure_dependencies(context)
    service = get_service(context)
    settings = service.current_settings or service.get_settings()
    requirement = settings.subscription_chat_id
    if not requirement:
        return True

    user = update.effective_user
    if user is None:
        return False

    target_chat: str | int = requirement
    if isinstance(requirement, str) and requirement.lstrip("-").isdigit():
        try:
            target_chat = int(requirement)
        except ValueError:
            target_chat = requirement

    try:
        member = await context.bot.get_chat_member(target_chat, user.id)
    except TelegramError as exc:
        LOGGER.warning("Failed to verify subscription for %s: %s", user.id, exc)
        if show_prompt:
            await send_subscription_prompt(
                update,
                context,
                settings,
                error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
            )
        return False

    status = getattr(member, "status", None)
    is_member = getattr(member, "is_member", None)
    subscribed = status not in {"left", "kicked"}
    if is_member is not None:
        subscribed = subscribed and bool(is_member)

    if not subscribed:
        if show_prompt:
            await send_subscription_prompt(update, context, settings)
        return False

    return True


def build_service() -> ChannelEconomyService:
    pricing = PricingConfig()
    rate = _parse_float_env("RUB_PER_USD")
    if rate is not None:
        if rate <= 0:
            LOGGER.warning("RUB_PER_USD must be positive, got %s", rate)
        else:
            pricing.rubles_per_usd = rate
    filter_config = FilterConfig()
    storage = build_storage()
    return ChannelEconomyService(storage=storage, pricing=pricing, filter_config=filter_config)


def build_storage() -> AbstractStorage:
    storage_path = Path(JSON_STORAGE_PATH) if JSON_STORAGE_PATH else DEFAULT_JSON_STORAGE_PATH
    try:
        return JsonStorage(storage_path)
    except Exception as exc:  # pragma: no cover - defensive
        LOGGER.error(
            "Failed to initialise JSON storage at %s: %s", storage_path, exc
        )
    return InMemoryStorage()


def build_crypto_client() -> CryptoPayClient | None:
    token = os.environ.get("CRYPTOPAY_TOKEN")
    if not token:
        LOGGER.warning("CRYPTOPAY_TOKEN is not configured; payments will be disabled")
        return None
    return CryptoPayClient(token=token)


def _clean_full_name(value: str | None) -> str | None:
    if not value:
        return None
    cleaned = " ".join(value.split())
    return cleaned or None


def sync_user_profile(update: Update, service: ChannelEconomyService) -> None:
    tg_user = update.effective_user
    if tg_user is None:
        return
    if service.get_user_balance(tg_user.id) is None:
        return
    full_name = _clean_full_name(tg_user.full_name)
    service.update_user_profile(
        tg_user.id,
        username=tg_user.username,
        full_name=full_name,
    )


def ensure_dependencies(context: ContextTypes.DEFAULT_TYPE) -> None:
    service = context.application.bot_data.setdefault("service", build_service())
    service.apply_settings(service.get_settings())
    context.application.bot_data.setdefault("crypto", build_crypto_client())


def is_admin_id(user_id: int | None, context: ContextTypes.DEFAULT_TYPE | None = None) -> bool:
    if user_id is None:
        return False
    if user_id in ADMIN_USER_IDS:
        return True
    if context is None:
        return False
    service = context.application.bot_data.get("service") if hasattr(context, "application") else None
    if service:
        user = service.get_user_balance(user_id)
        if user and user.is_admin:
            return True
    return False


def main_menu_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="action:balance"),
            InlineKeyboardButton("‚ö°Ô∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é", callback_data="action:energy"),
        ],
        [
            InlineKeyboardButton("üåü –ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞", callback_data="action:golden_card"),
            InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="action:support"),
        ],
        [
            InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="action:post"),
        ],
    ]
    if is_admin:
        rows.append([InlineKeyboardButton("üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="action:admin")])
    return InlineKeyboardMarkup(rows)


def energy_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("50 ‚ö°Ô∏è", callback_data="energy:50"),
                InlineKeyboardButton("100 ‚ö°Ô∏è", callback_data="energy:100"),
            ],
            [
                InlineKeyboardButton("250 ‚ö°Ô∏è", callback_data="energy:250"),
                InlineKeyboardButton("–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="energy:custom"),
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action:menu")],
        ]
    )


def golden_card_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("12 —á", callback_data="golden:12"),
                InlineKeyboardButton("24 —á", callback_data="golden:24"),
            ],
            [InlineKeyboardButton("72 —á", callback_data="golden:72")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action:menu")],
        ]
    )


ADMIN_USERS_PAGE_SIZE = 5
POST_PREVIEW_LENGTH = 400
SUPPORT_HISTORY_LIMIT = 10
SUPPORT_TICKETS_PAGE_SIZE = 5


def _format_ticket_subject(ticket: Ticket) -> str:
    subject = ticket.subject
    if not subject and ticket.messages:
        subject = ticket.messages[0].text
    if not subject:
        subject = "–ë–µ–∑ —Ç–µ–º—ã"
    normalized = " ".join(subject.split())
    if len(normalized) > 60:
        normalized = normalized[:57] + "..."
    return normalized or "–ë–µ–∑ —Ç–µ–º—ã"


def _format_ticket_timestamp(when: datetime) -> str:
    try:
        local_time = when.astimezone()
    except ValueError:  # pragma: no cover - timezone edge case
        local_time = when
    return local_time.strftime("%d.%m %H:%M")


def _format_ticket_messages(
    ticket: Ticket, *, viewer: str, limit: int = SUPPORT_HISTORY_LIMIT
) -> str:
    messages = ticket.messages[-limit:]
    if not messages:
        return "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
    lines: list[str] = []
    for message in messages:
        timestamp = _format_ticket_timestamp(message.created_at)
        if message.sender == "user":
            sender_label = "üë§ –í—ã" if viewer == "user" else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        else:
            sender_label = "üõ† –ê–¥–º–∏–Ω" if viewer == "user" else "üõ† –í—ã"
        lines.append(f"[{timestamp}] {sender_label}:")
        lines.append(message.text)
        lines.append("")
    return "\n".join(lines).rstrip()


async def show_support_overview(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    notice: str | None = None,
) -> None:
    service = get_service(context)
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None:
        if update.callback_query:
            await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        elif update.message:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user = service.get_user_balance(user_id)
    if user is None:
        if update.callback_query:
            await update.callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
            await update.callback_query.message.edit_text(
                "‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action:menu")]]
                ),
            )
        elif update.message:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    tickets = service.list_user_tickets(user_id)
    lines = ["üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    if notice:
        lines.append("")
        lines.append(notice)

    if tickets:
        lines.append("")
        lines.append("–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:")
        for ticket in tickets:
            status_icon = "üü¢" if ticket.status == "open" else "‚ö™Ô∏è"
            lines.append(f"{status_icon} #{ticket.ticket_id} ‚Äî {_format_ticket_subject(ticket)}")
    else:
        lines.append("")
        lines.append(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ ¬´üì® –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç¬ª, —á—Ç–æ–±—ã –æ–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        )

    keyboard_rows: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton("üì® –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç", callback_data="support:new")]
    ]
    for ticket in tickets[:10]:
        icon = "üîì" if ticket.status == "open" else "üîí"
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    f"{icon} #{ticket.ticket_id}",
                    callback_data=f"support:view:{ticket.ticket_id}",
                )
            ]
        )
    keyboard_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action:menu")])

    keyboard = InlineKeyboardMarkup(keyboard_rows)
    text = "\n".join(lines)
    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    elif update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def show_support_ticket_detail(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    ticket_id: int,
    *,
    info: str | None = None,
) -> None:
    service = get_service(context)
    user_id = update.effective_user.id if update.effective_user else None
    ticket = service.get_ticket(ticket_id)
    if ticket is None or (user_id is not None and ticket.user_id != user_id and not is_admin_id(user_id, context)):
        if update.callback_query:
            await update.callback_query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        elif update.message:
            await update.message.reply_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return

    status_text = "üü¢ –û—Ç–∫—Ä—ã—Ç" if ticket.status == "open" else "‚úÖ –ó–∞–∫—Ä—ã—Ç"
    lines = [
        f"üóÇ –¢–∏–∫–µ—Ç #{ticket.ticket_id}",
        status_text,
        f"–¢–µ–º–∞: {_format_ticket_subject(ticket)}",
        "",
    ]
    if info:
        lines.append(info)
        lines.append("")
    lines.append(_format_ticket_messages(ticket, viewer="user"))

    buttons: list[list[InlineKeyboardButton]] = []
    if ticket.status == "open":
        buttons.append(
            [
                InlineKeyboardButton(
                    "‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support:reply:{ticket.ticket_id}"
                )
            ]
        )
        buttons.append(
            [
                InlineKeyboardButton(
                    "‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"support:close:{ticket.ticket_id}"
                )
            ]
        )
    else:
        buttons.append(
            [
                InlineKeyboardButton(
                    "‚ôªÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"support:reopen:{ticket.ticket_id}"
                )
            ]
        )
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="support:list")])
    keyboard = InlineKeyboardMarkup(buttons)

    text = "\n".join(lines)
    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    elif update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def show_admin_support_overview(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    info: str | None = None,
) -> None:
    user_id = update.effective_user.id if update.effective_user else None
    if not is_admin_id(user_id, context):
        if update.callback_query:
            await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        elif update.message:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    filter_state = context.user_data.get("admin_support_filter", "open")
    page = context.user_data.get("admin_support_page", 0)
    service = get_service(context)
    status_filter = None if filter_state == "all" else "open"
    tickets = service.list_tickets(status=status_filter)

    total = len(tickets)
    if total == 0:
        text = "üÜò –û–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        if info:
            text += f"\n\n{info}"
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:refresh")]]
        )
        if update.callback_query:
            await update.callback_query.message.edit_text(text, reply_markup=keyboard)
        elif update.message:
            await update.message.reply_text(text, reply_markup=keyboard)
        return

    tickets.sort(key=lambda t: t.updated_at, reverse=True)
    max_page = (total - 1) // SUPPORT_TICKETS_PAGE_SIZE
    page = max(0, min(page, max_page))
    context.user_data["admin_support_page"] = page

    start = page * SUPPORT_TICKETS_PAGE_SIZE
    subset = tickets[start : start + SUPPORT_TICKETS_PAGE_SIZE]

    lines = ["üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    if info:
        lines.append("")
        lines.append(info)
    lines.append("")
    lines.append(
        "–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è "
        + ("—Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ" if filter_state == "open" else "–≤—Å–µ")
        + f" —Ç–∏–∫–µ—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {max_page + 1})."
    )
    lines.append("")
    for ticket in subset:
        status_icon = "üü¢" if ticket.status == "open" else "‚ö™Ô∏è"
        lines.append(
            f"{status_icon} #{ticket.ticket_id} ‚Ä¢ {ticket.user_id} ‚Äî {_format_ticket_subject(ticket)}"
        )

    buttons: list[list[InlineKeyboardButton]] = [
        [
            InlineKeyboardButton(
                "üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ" + (" ‚úÖ" if filter_state == "open" else ""),
                callback_data="admin:support:filter:open",
            ),
            InlineKeyboardButton(
                "üìÅ –í—Å–µ" + (" ‚úÖ" if filter_state == "all" else ""),
                callback_data="admin:support:filter:all",
            ),
        ]
    ]

    for ticket in subset:
        buttons.append(
            [
                InlineKeyboardButton(
                    f"#{ticket.ticket_id} ({'üîì' if ticket.status == 'open' else 'üîí'})",
                    callback_data=f"admin:support:view:{ticket.ticket_id}",
                )
            ]
        )

    if max_page > 0:
        prev_page = (page - 1) % (max_page + 1)
        next_page = (page + 1) % (max_page + 1)
        buttons.append(
            [
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"admin:support:page:{prev_page}",
                ),
                InlineKeyboardButton(
                    "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                    callback_data=f"admin:support:page:{next_page}",
                ),
            ]
        )

    buttons.append([InlineKeyboardButton("üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")])

    text = "\n".join(lines)
    keyboard = InlineKeyboardMarkup(buttons)
    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    elif update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def show_admin_ticket_detail(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    ticket_id: int,
    *,
    info: str | None = None,
) -> None:
    user_id = update.effective_user.id if update.effective_user else None
    if not is_admin_id(user_id, context):
        if update.callback_query:
            await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        elif update.message:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    service = get_service(context)
    ticket = service.get_ticket(ticket_id)
    if ticket is None:
        if update.callback_query:
            await update.callback_query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        elif update.message:
            await update.message.reply_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    status_text = "üü¢ –û—Ç–∫—Ä—ã—Ç" if ticket.status == "open" else "‚úÖ –ó–∞–∫—Ä—ã—Ç"
    lines = [
        f"üóÇ –¢–∏–∫–µ—Ç #{ticket.ticket_id}",
        status_text,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user_id}",
        f"–¢–µ–º–∞: {_format_ticket_subject(ticket)}",
        "",
    ]
    if info:
        lines.append(info)
        lines.append("")
    lines.append(_format_ticket_messages(ticket, viewer="admin"))

    buttons: list[list[InlineKeyboardButton]] = []
    if ticket.status == "open":
        buttons.append(
            [
                InlineKeyboardButton(
                    "‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin:support:reply:{ticket.ticket_id}"
                )
            ]
        )
        buttons.append(
            [
                InlineKeyboardButton(
                    "‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"admin:support:close:{ticket.ticket_id}"
                )
            ]
        )
    else:
        buttons.append(
            [
                InlineKeyboardButton(
                    "‚ôªÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"admin:support:reopen:{ticket.ticket_id}"
                )
            ]
        )
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:support")])

    keyboard = InlineKeyboardMarkup(buttons)
    text = "\n".join(lines)
    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    elif update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def send_main_menu(
    update: Update, context: ContextTypes.DEFAULT_TYPE, text: str
) -> None:
    ensure_dependencies(context)
    service = get_service(context)
    tg_user = update.effective_user
    user = service.get_user_balance(tg_user.id) if tg_user else None
    user_id = tg_user.id if tg_user else None
    keyboard = main_menu_keyboard(is_admin=is_admin_id(user_id, context))

    energy = user.energy if user else 0
    active_cards = (
        sum(1 for card in user.golden_cards if card.expires_at > utcnow())
        if user
        else 0
    )
    total_cards = len(user.golden_cards) if user else 0
    display_name = (
        user.full_name
        or (tg_user.full_name if tg_user else None)
        or (tg_user.username if tg_user else None)
        or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    post_cost = service.post_energy_cost
    rub_note = None
    if service.current_settings and service.current_settings.energy_price_per_unit > 0:
        rub_note = service.current_settings.energy_price_per_unit * post_cost

    cost_line = f"{post_cost} ‚ö°Ô∏è"
    if rub_note:
        cost_line += f" (~{_format_rubles(rub_note)} ‚ÇΩ)"

    lines = [
        "‚ú® <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        f"üë§ <b>{html.escape(display_name)}</b>",
        "",
        f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: <b>{energy}</b>",
        f"üåü –ó–æ–ª–æ—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: <b>{active_cards}</b> –∏–∑ {total_cards}",
        f"üßæ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞: <b>{cost_line}</b>",
    ]

    if text:
        lines.append("")
        lines.append(html.escape(text, quote=False))

    lines.append("")
    lines.append("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.")

    menu_text = "\n".join(lines)

    if update.message:
        await update.message.reply_text(
            menu_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
    elif update.callback_query:
        await update.callback_query.message.edit_text(
            menu_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )


def get_service(context: ContextTypes.DEFAULT_TYPE) -> ChannelEconomyService:
    return context.application.bot_data.setdefault("service", build_service())


def get_crypto_client(context: ContextTypes.DEFAULT_TYPE) -> CryptoPayClient | None:
    client = context.application.bot_data.get("crypto")
    if client is None:
        client = build_crypto_client()
        if client:
            context.application.bot_data["crypto"] = client
    return client


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    service = get_service(context)
    tg_user = update.effective_user
    if tg_user is None:
        if update.message:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    if not await ensure_subscription(update, context):
        return
    full_name = _clean_full_name(tg_user.full_name)
    try:
        service.register_user(
            tg_user.id,
            subscribed_to_sponsors=True,
            username=tg_user.username,
            full_name=full_name,
        )
    except ValueError as exc:
        await update.message.reply_text(str(exc))
        return
    sync_user_profile(update, service)
    ensure_dependencies(context)
    user = service.get_user_balance(tg_user.id)
    if user and user.is_banned and not is_admin_id(tg_user.id, context):
        await update.message.reply_text("–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.",
        disable_web_page_preview=True,
    )
    await send_main_menu(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ")


async def handle_menu_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    query = update.callback_query
    assert query is not None
    await query.answer()
    action = query.data.split(":", 1)[1]

    if action == "check_subscription":
        if await ensure_subscription(update, context, show_prompt=False):
            await send_main_menu(
                update,
                context,
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            )
        else:
            service = get_service(context)
            settings = service.current_settings or service.get_settings()
            await send_subscription_prompt(update, context, settings)
        return

    if action == "menu":
        context.user_data.pop("post_creation", None)
        context.user_data.pop("awaiting_custom_energy", None)
        context.user_data.pop("awaiting_post_price", None)
        context.user_data.pop("awaiting_energy_price", None)
        context.user_data.pop("awaiting_user_balance", None)
        context.user_data.pop("support_new_ticket", None)
        context.user_data.pop("support_reply", None)
        context.user_data.pop("admin_ticket_reply", None)
        context.user_data.pop("awaiting_subscription_target", None)
        await send_main_menu(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá")
        return

    if not await ensure_subscription(update, context):
        return

    service = get_service(context)
    sync_user_profile(update, service)
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    user = service.get_user_balance(user_id)
    if user is None and action != "admin":
        await query.message.edit_text(
            "‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return

    if user and user.is_banned and action != "admin" and not is_admin_id(user_id, context):
        await query.message.edit_text(
            "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return

    if action == "balance":
        if not user:
            await query.message.edit_text(
                "‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="action:menu")]]
                ),
            )
            return
        active_cards = sum(1 for card in user.golden_cards if card.expires_at > utcnow())
        total_cards = len(user.golden_cards)
        post_cost = service.post_energy_cost
        rub_note = None
        if service.current_settings and service.current_settings.energy_price_per_unit > 0:
            rub_note = service.current_settings.energy_price_per_unit * post_cost
        cost_line = f"{post_cost} ‚ö°Ô∏è"
        if rub_note:
            cost_line += f" (~{_format_rubles(rub_note)} ‚ÇΩ)"
        await query.message.edit_text(
            "\n".join(
                [
                    "üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>",
                    f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: <b>{user.energy}</b>",
                    f"üåü –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: <b>{active_cards}</b> –∏–∑ {total_cards}",
                    f"üßæ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞: <b>{cost_line}</b>",
                ]
            ),
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        return

    if action == "energy":
        await query.message.edit_text(
            "‚ö°Ô∏è <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É.",
            reply_markup=energy_keyboard(),
            parse_mode=ParseMode.HTML,
        )
        return

    if action == "golden_card":
        active_cards = (
            sum(1 for card in user.golden_cards if card.expires_at > utcnow())
            if user
            else 0
        )
        lines = [
            "üåü <b>–ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</b>",
            "–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.",
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –≤ –ª–µ–Ω—Ç–µ –∏ –ø—Ä–∏–≤–ª–µ—á—å –º–∞–∫—Å–∏–º—É–º –≤–Ω–∏–º–∞–Ω–∏—è.",
            "",
            f"–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: <b>{active_cards}</b>",
            "",
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
        ]
        for hours in GOLDEN_CARD_PRESETS:
            duration = timedelta(hours=hours)
            price_usd = service.pricing.price_for_golden_card(duration)
            price_rub = service.pricing.convert_usd_to_rub(price_usd)
            energy_cost = service.energy_cost_for_golden_card(duration)
            price_text = _format_rubles(price_rub)
            note = f"~{price_text} ‚ÇΩ" if price_text else None
            energy_text = f" –∏–ª–∏ {energy_cost}‚ö°Ô∏è" if energy_cost else ""
            price_label = note or f"{price_usd:.2f} $"
            lines.append(f"‚Ä¢ {hours} —á ‚Äî {price_label}{energy_text}")
        await query.message.edit_text(
            "\n".join(lines),
            reply_markup=golden_card_keyboard(),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        return

    if action == "post":
        context.user_data["post_creation"] = {"step": "awaiting_content"}
        post_cost = service.post_energy_cost
        rub_note = None
        if service.current_settings and service.current_settings.energy_price_per_unit > 0:
            rub_note = service.current_settings.energy_price_per_unit * post_cost
        cost_line = f"{post_cost} ‚ö°Ô∏è"
        if rub_note:
            cost_line += f" (~{_format_rubles(rub_note)} ‚ÇΩ)"
        await query.message.edit_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</b>\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç <b>{cost_line}</b>.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞: &lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;, &lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;, &lt;u&gt;–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;, &lt;code&gt;–∫–æ–¥&lt;/code&gt;.\n"
            "‚Ä¢ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é (–æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–º).\n"
            "–ü–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂—É –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="action:menu")]]
            ),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        return

    if action == "support":
        await show_support_overview(update, context)
        return

    if action == "admin":
        if not is_admin_id(user_id, context):
            await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        await show_admin_menu(update, context)
        return

    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)


async def handle_support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    query = update.callback_query
    assert query is not None
    await query.answer()

    if not await ensure_subscription(update, context):
        return

    parts = query.data.split(":")
    if len(parts) < 2:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return

    action = parts[1]
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    service = get_service(context)
    user = service.get_user_balance(user_id)
    if user is None:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
        await query.message.edit_text(
            "‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action:menu")]]
            ),
        )
        return
    if user.is_banned and not is_admin_id(user_id, context):
        await query.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return

    if action == "list":
        await show_support_overview(update, context)
        return

    if action == "new":
        context.user_data["support_new_ticket"] = True
        context.user_data.pop("support_reply", None)
        await query.message.edit_text(
            "üÜò –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="support:list")]]
            ),
        )
        return

    if action == "view" and len(parts) >= 3:
        try:
            ticket_id = int(parts[2])
        except ValueError:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç", show_alert=True)
            return
        await show_support_ticket_detail(update, context, ticket_id)
        return

    if action == "reply" and len(parts) >= 3:
        try:
            ticket_id = int(parts[2])
        except ValueError:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç", show_alert=True)
            return
        ticket = service.get_ticket(ticket_id)
        if ticket is None or ticket.user_id != user_id:
            await query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if ticket.status != "open":
            await query.answer("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç", show_alert=True)
            return
        context.user_data["support_reply"] = {"ticket_id": ticket_id}
        await query.message.edit_text(
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"support:view:{ticket_id}")]]
            ),
        )
        return

    if action in {"close", "reopen"} and len(parts) >= 3:
        try:
            ticket_id = int(parts[2])
        except ValueError:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç", show_alert=True)
            return
        try:
            if action == "close":
                service.close_ticket(ticket_id, actor_user_id=user_id)
                info = "‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç."
            else:
                service.reopen_ticket(ticket_id, actor_user_id=user_id)
                info = "‚ôªÔ∏è –¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤–Ω–æ–≤—å."
        except PermissionError:
            await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
        except ValueError as exc:
            await query.answer(str(exc), show_alert=True)
            return
        await show_support_ticket_detail(update, context, ticket_id, info=info)
        return

    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    if not await ensure_subscription(update, context):
        return
    service = get_service(context)
    user = service.get_user_balance(update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    if user.is_banned and not is_admin_id(update.effective_user.id, context):
        await update.message.reply_text("üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return
    active_cards = sum(1 for card in user.golden_cards if card.expires_at > utcnow())
    total_cards = len(user.golden_cards)
    post_cost = service.post_energy_cost
    rub_note = None
    if service.current_settings and service.current_settings.energy_price_per_unit > 0:
        rub_note = service.current_settings.energy_price_per_unit * post_cost
    cost_line = f"{post_cost} ‚ö°Ô∏è"
    if rub_note:
        cost_line += f" (~{_format_rubles(rub_note)} ‚ÇΩ)"
    await update.message.reply_text(
        "\n".join(
            [
                "üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>",
                f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: <b>{user.energy}</b>",
                f"üåü –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: <b>{active_cards}</b> –∏–∑ {total_cards}",
                f"üßæ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞: <b>{cost_line}</b>",
            ]
        ),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )


async def buy_energy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    if not await ensure_subscription(update, context):
        return
    service = get_service(context)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏: /buy_energy 50")
        return
    amount = int(context.args[0])
    if not is_admin_id(update.effective_user.id, context):
        await update.message.reply_text(
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚ö°Ô∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é¬ª –≤ –º–µ–Ω—é."
        )
        return
    user = service.credit_energy(update.effective_user.id, amount)
    await update.message.reply_text(
        f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ö°Ô∏è. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.energy}"
    )


async def buy_golden_card(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    if not await ensure_subscription(update, context):
        return
    service = get_service(context)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö: /buy_golden_card 24")
        return
    hours = int(context.args[0])
    if not is_admin_id(update.effective_user.id, context):
        await update.message.reply_text(
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∑–æ–ª–æ—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üåü –ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞¬ª."
        )
        return
    service.grant_golden_card(update.effective_user.id, timedelta(hours=hours))
    await update.message.reply_text(
        f"üåü –ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {hours} —á."
    )


async def post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    if not await ensure_subscription(update, context):
        return
    service = get_service(context)
    sync_user_profile(update, service)
    if not context.args:
        post_cost = service.post_energy_cost
        rub_note = None
        if service.current_settings and service.current_settings.energy_price_per_unit > 0:
            rub_note = service.current_settings.energy_price_per_unit * post_cost
        cost_line = f"{post_cost} ‚ö°Ô∏è"
        if rub_note:
            cost_line += f" (~{_format_rubles(rub_note)} ‚ÇΩ)"
        await update.message.reply_text(
            "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /post.\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {cost_line}.",
        )
        return
    message = " ".join(context.args)
    try:
        new_post = service.submit_post(update.effective_user.id, message)
    except ValueError as exc:
        await update.message.reply_text(str(exc))
        return
    pin_text = " –ü–æ—Å—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω." if new_post.requires_pin else ""
    await update.message.reply_text(
        f"–ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.{pin_text}\n"
        f"–°–ø–∏—Å–∞–Ω–æ {service.post_energy_cost}‚ö°Ô∏è."
    )


async def handle_energy_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    query = update.callback_query
    assert query is not None
    await query.answer()
    if not await ensure_subscription(update, context):
        return
    try:
        data = query.data.split(":", 1)[1]
    except (ValueError, IndexError):
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    if data == "custom":
        context.user_data["awaiting_custom_energy"] = True
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ö°Ô∏è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 150).\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action:menu")]]
            ),
        )
        return

    try:
        amount = int(data)
    except ValueError:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    service = get_service(context)
    sync_user_profile(update, service)
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None:
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    user = service.get_user_balance(user_id)
    if user is None:
        await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return
    if user.is_banned and not is_admin_id(user_id, context):
        await query.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
        return

    price = service.pricing.price_for_energy(amount)
    rub_total = None
    if service.current_settings:
        rub_total = service.current_settings.energy_price_per_unit * amount
    client = get_crypto_client(context)
    if client is None:
        await query.message.reply_text(
            "üí§ –ü–ª–∞—Ç—ë–∂–Ω—ã–π —à–ª—é–∑ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return

    try:
        invoice = await client.create_invoice(
            amount=price,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ ({amount}‚ö°Ô∏è)",
            payload=f"energy:{update.effective_user.id}:{amount}",
        )
    except CryptoPayError as exc:
        await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {exc}")
        return

    service.record_invoice(
        Invoice(
            invoice_id=invoice.invoice_id,
            user_id=user_id,
            invoice_type="energy",
            amount=invoice.amount,
            asset=invoice.asset,
            pay_url=invoice.pay_url,
            price=price,
            status=invoice.status,
            payload=invoice.payload,
            energy_amount=amount,
        )
    )

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice.pay_url)],
            [
                InlineKeyboardButton(
                    "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"invoice:check:{invoice.invoice_id}"
                )
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")],
        ]
    )

    amount_line = f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price:.2f} $"
    if rub_total is not None:
        amount_line += f" (~{rub_total:.2f} ‚ÇΩ)"

    await query.message.reply_text(
        "üí≥ –°—á—ë—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤!\n"
        f"{amount_line}\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é.",
        reply_markup=keyboard,
    )


async def handle_golden_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    query = update.callback_query
    assert query is not None
    await query.answer()
    if not await ensure_subscription(update, context):
        return
    try:
        hours = int(query.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    service = get_service(context)
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None:
        await query.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return
    user = service.get_user_balance(user_id)
    if user is None:
        await query.message.edit_text(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return
    if user.is_banned and not is_admin_id(user_id, context):
        await query.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
        return

    duration = timedelta(hours=hours)
    price = service.pricing.price_for_golden_card(duration)
    rub_total = None
    try:
        rub_total = service.pricing.convert_usd_to_rub(price)
    except ValueError:
        rub_total = None

    energy_cost = service.energy_cost_for_golden_card(duration)

    price_line = f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price:.2f} $</b>"
    if rub_total is not None:
        price_line += f" (~{_format_rubles(rub_total)} ‚ÇΩ)"

    message_lines = [
        f"üåü <b>–ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ {hours} —á</b>",
        "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤–∞—à –±–ª–∏–∂–∞–π—à–∏–π –ø–æ—Å—Ç –≤ —Ç–æ–ø–µ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –≤–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.",
        "",
        price_line,
    ]

    if energy_cost is not None:
        message_lines.append(
            f"‚ö°Ô∏è –ò–ª–∏ —Å–ø–∏—Å–∞—Ç—å <b>{energy_cost}‚ö°Ô∏è</b> —Å –±–∞–ª–∞–Ω—Å–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ {user.energy}‚ö°Ô∏è)."
        )

    message_lines.append("")
    message_lines.append("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")

    buttons = [
        [
            InlineKeyboardButton(
                "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å USDT", callback_data=f"goldenpay:crypto:{hours}"
            )
        ]
    ]
    if energy_cost is not None:
        buttons.append(
            [
                InlineKeyboardButton(
                    f"‚ö°Ô∏è –û–ø–ª–∞—Ç–∏—Ç—å {energy_cost}‚ö°Ô∏è",
                    callback_data=f"goldenpay:energy:{hours}",
                )
            ]
        )
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action:golden_card")])

    await query.message.edit_text(
        "\n".join(message_lines),
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )


async def handle_golden_payment_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    ensure_dependencies(context)
    query = update.callback_query
    assert query is not None
    await query.answer()
    if not await ensure_subscription(update, context):
        return

    try:
        _, method, hours_str = query.data.split(":", 2)
        hours = int(hours_str)
    except (ValueError, IndexError):
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    service = get_service(context)
    sync_user_profile(update, service)
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None:
        await query.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return

    user = service.get_user_balance(user_id)
    if user is None:
        await query.message.edit_text(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return
    if user.is_banned and not is_admin_id(user_id, context):
        await query.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
        return

    duration = timedelta(hours=hours)
    price = service.pricing.price_for_golden_card(duration)
    rub_total = None
    try:
        rub_total = service.pricing.convert_usd_to_rub(price)
    except ValueError:
        rub_total = None

    if method == "energy":
        energy_cost = service.energy_cost_for_golden_card(duration)
        if energy_cost is None:
            await query.answer("–û–ø–ª–∞—Ç–∞ —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        if user.energy < energy_cost:
            await query.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è {energy_cost}‚ö°Ô∏è, –¥–æ—Å—Ç—É–ø–Ω–æ {user.energy}‚ö°Ô∏è.",
                show_alert=True,
            )
            return
        try:
            service.purchase_golden_card_with_energy(user_id, duration)
        except ValueError as exc:
            await query.answer(str(exc), show_alert=True)
            return

        updated_user = service.get_user_balance(user_id)
        remaining = updated_user.energy if updated_user else max(0, user.energy - energy_cost)
        await query.message.edit_text(
            "‚úÖ <b>–ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
            f"–°–ø–∏—Å–∞–Ω–æ <b>{energy_cost}‚ö°Ô∏è</b>. –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç <b>{hours} —á</b>.\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏: <b>{remaining}‚ö°Ô∏è</b>.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        return

    if method != "crypto":
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", show_alert=True)
        return

    client = get_crypto_client(context)
    if client is None:
        await query.message.edit_text(
            "üí§ –ü–ª–∞—Ç—ë–∂–Ω—ã–π —à–ª—é–∑ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return

    try:
        invoice = await client.create_invoice(
            amount=price,
            description=f"–ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ {hours}—á",
            payload=f"golden:{user_id}:{hours}",
        )
    except CryptoPayError as exc:
        await query.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {exc}",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return

    service.record_invoice(
        Invoice(
            invoice_id=invoice.invoice_id,
            user_id=user_id,
            invoice_type="golden",
            amount=invoice.amount,
            asset=invoice.asset,
            pay_url=invoice.pay_url,
            price=price,
            status=invoice.status,
            payload=invoice.payload,
            golden_hours=hours,
        )
    )

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice.pay_url)],
            [
                InlineKeyboardButton(
                    "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"invoice:check:{invoice.invoice_id}"
                )
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")],
        ]
    )

    amount_line = f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price:.2f} $</b>"
    if rub_total is not None:
        amount_line += f" (~{_format_rubles(rub_total)} ‚ÇΩ)"

    await query.message.edit_text(
        "üåü <b>–°—á—ë—Ç –Ω–∞ –∑–æ–ª–æ—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ—Ç–æ–≤!</b>\n"
        f"{amount_line}\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )


async def handle_invoice_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    query = update.callback_query
    assert query is not None
    await query.answer()
    if not await ensure_subscription(update, context):
        return

    try:
        invoice_id = int(query.data.split(":", 2)[2])
    except (ValueError, IndexError):
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞", show_alert=True)
        return

    service = get_service(context)
    sync_user_profile(update, service)
    stored_invoice = service.get_invoice(invoice_id)
    user_id = update.effective_user.id if update.effective_user else None

    if stored_invoice is None or stored_invoice.user_id != user_id:
        await query.answer("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if stored_invoice.status.lower() in PAID_INVOICE_STATUSES:
        await query.answer()
        await query.message.edit_text(
            "‚úÖ –°—á—ë—Ç —É–∂–µ –æ–ø–ª–∞—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
            ),
        )
        return

    client = get_crypto_client(context)
    if client is None:
        await query.answer("–ü–ª–∞—Ç—ë–∂–Ω—ã–π —à–ª—é–∑ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return

    try:
        remote_invoice = await client.get_invoice(invoice_id)
    except CryptoPayError as exc:
        await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {exc}", show_alert=True)
        return

    if remote_invoice.status.lower() not in PAID_INVOICE_STATUSES:
        await query.answer("–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    service.mark_invoice_paid(invoice_id)

    if stored_invoice.invoice_type == "energy" and stored_invoice.energy_amount:
        try:
            user = service.credit_energy(stored_invoice.user_id, stored_invoice.energy_amount)
        except ValueError as exc:
            message = (
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –∑–∞—á–∏—Å–ª–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å:\n"
                f"{exc}"
            )
        else:
            message = (
                "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"‚ö°Ô∏è –ù–∞—á–∏—Å–ª–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {stored_invoice.energy_amount}\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.energy}"
            )
    elif stored_invoice.invoice_type == "golden" and stored_invoice.golden_hours:
        duration = timedelta(hours=stored_invoice.golden_hours)
        try:
            service.grant_golden_card(stored_invoice.user_id, duration)
        except ValueError as exc:
            message = (
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–æ–ª–æ—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å:\n"
                f"{exc}"
            )
        else:
            message = (
                "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"üåü –ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ {stored_invoice.golden_hours} —á."
            )
    else:
        message = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."

    await query.answer()
    await query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")]]
        ),
    )


async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    message = update.message
    if message is None:
        return
    if not await ensure_subscription(update, context):
        return

    service = get_service(context)
    user_data = context.user_data
    user_id = update.effective_user.id if update.effective_user else None
    user = service.get_user_balance(user_id) if user_id is not None else None
    is_admin_user = is_admin_id(user_id, context) if user_id is not None else False

    admin_reply_state = user_data.get("admin_ticket_reply")
    if admin_reply_state:
        if not is_admin_user:
            user_data.pop("admin_ticket_reply", None)
        else:
            if not message.text:
                await message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª.")
                return
            raw = message.text.strip()
            ticket_id = admin_reply_state.get("ticket_id")
            if raw.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
                user_data.pop("admin_ticket_reply", None)
                await message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
                if ticket_id is not None:
                    await show_admin_ticket_detail(update, context, ticket_id)
                return
            if ticket_id is None:
                user_data.pop("admin_ticket_reply", None)
                await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–∫–µ—Ç.")
                return
            try:
                ticket = service.add_ticket_message(ticket_id, "admin", raw)
            except ValueError as exc:
                await message.reply_text(str(exc))
                return
            user_data.pop("admin_ticket_reply", None)
            await message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            try:
                await context.bot.send_message(
                    chat_id=ticket.user_id,
                    text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n" + raw,
                )
            except Exception as exc:  # pragma: no cover - defensive
                LOGGER.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", ticket.user_id, exc)
            await show_admin_ticket_detail(
                update,
                context,
                ticket_id,
                info="–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            )
        return

    subscription_state = user_data.get("awaiting_subscription_target")
    if subscription_state:
        if not is_admin_user:
            user_data.pop("awaiting_subscription_target", None)
        else:
            if not message.text:
                await message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username, —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Å—Å—ã–ª–∫—É, –ª–∏–±–æ ¬´–æ—Ç–º–µ–Ω–∞¬ª."
                )
                return
            raw = message.text.strip()
            if raw.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
                user_data.pop("awaiting_subscription_target", None)
                await message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                await show_admin_menu(update, context)
                return
            try:
                chat_id, invite_link = _parse_subscription_input(raw)
            except ValueError as exc:
                await message.reply_text(str(exc))
                return
            service.update_subscription_requirement(chat_id, invite_link)
            user_data.pop("awaiting_subscription_target", None)
            await message.reply_text("‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            await show_admin_menu(
                update,
                context,
                info="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
            )
        return

    support_new_state = user_data.get("support_new_ticket")
    if support_new_state:
        if not message.text:
            await message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª.")
            return
        raw = message.text.strip()
        if raw.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
            user_data.pop("support_new_ticket", None)
            await message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await show_support_overview(update, context)
            return
        if user_id is None:
            user_data.pop("support_new_ticket", None)
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        try:
            ticket = service.open_ticket(user_id, raw)
        except ValueError as exc:
            await message.reply_text(str(exc))
            return
        user_data.pop("support_new_ticket", None)
        await show_support_ticket_detail(
            update,
            context,
            ticket.ticket_id,
            info="‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        )
        return

    support_reply_state = user_data.get("support_reply")
    if support_reply_state:
        if not message.text:
            await message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª.")
            return
        raw = message.text.strip()
        ticket_id = support_reply_state.get("ticket_id")
        if raw.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
            user_data.pop("support_reply", None)
            if ticket_id is not None:
                await show_support_ticket_detail(update, context, ticket_id)
            else:
                await show_support_overview(update, context)
            return
        if ticket_id is None:
            user_data.pop("support_reply", None)
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–∫–µ—Ç.")
            return
        try:
            service.add_ticket_message(ticket_id, "user", raw)
        except ValueError as exc:
            await message.reply_text(str(exc))
            return
        user_data.pop("support_reply", None)
        await show_support_ticket_detail(
            update,
            context,
            ticket_id,
            info="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
        )
        return

    # Admin adjusts post price
    if user_data.get("awaiting_post_price"):
        if not message.text:
            await message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 25.")
            return
        raw = message.text.strip()
        if raw.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
            user_data.pop("awaiting_post_price", None)
            await message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await show_admin_menu(update, context)
            return
        try:
            cost = int(raw)
            if cost <= 0:
                raise ValueError
        except ValueError:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0, –Ω–∞–ø—Ä–∏–º–µ—Ä 25.")
            return
        user_data.pop("awaiting_post_price", None)
        try:
            settings = service.update_post_price(cost)
        except ValueError as exc:
            await message.reply_text(str(exc))
            return
        await message.reply_text(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {settings.post_energy_cost} ‚ö°Ô∏è."
        )
        await show_admin_menu(update, context, info="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    # Admin adjusts energy price
    if user_data.get("awaiting_energy_price"):
        if not message.text:
            await message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 15.5.")
            return
        raw = message.text.strip()
        if raw.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
            user_data.pop("awaiting_energy_price", None)
            await message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await show_admin_menu(update, context)
            return
        try:
            price = float(raw.replace(",", "."))
            if price <= 0:
                raise ValueError
        except ValueError:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 15.5.")
            return
        user_data.pop("awaiting_energy_price", None)
        try:
            settings = service.update_energy_price(price)
        except ValueError as exc:
            await message.reply_text(str(exc))
            return
        await message.reply_text(
            f"–¶–µ–Ω–∞ –∑–∞ —ç–Ω–µ—Ä–≥–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {settings.energy_price_per_unit:.2f} ‚ÇΩ –∑–∞ 1 ‚ö°Ô∏è."
        )
        await show_admin_menu(update, context, info="–¶–µ–Ω–∞ –∑–∞ —ç–Ω–µ—Ä–≥–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    balance_state = user_data.get("awaiting_user_balance")
    if balance_state:
        if not message.text:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª.")
            return
        raw = message.text.strip()
        target_user_id = balance_state.get("user_id")
        if raw.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
            user_data.pop("awaiting_user_balance", None)
            await message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            if target_user_id is not None:
                await show_user_detail(update, context, target_user_id)
            return
        if target_user_id is None:
            user_data.pop("awaiting_user_balance", None)
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        try:
            if raw.startswith(("+", "-")):
                delta = int(raw)
                target_user = service.adjust_user_energy(target_user_id, delta)
                notice = f"–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {delta:+d}‚ö°Ô∏è. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {target_user.energy}‚ö°Ô∏è."
            else:
                value = int(raw)
                target_user = service.set_user_energy(target_user_id, value)
                notice = f"–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {target_user.energy}‚ö°Ô∏è."
        except ValueError as exc:
            await message.reply_text(f"–û—à–∏–±–∫–∞: {exc}")
            return
        user_data.pop("awaiting_user_balance", None)
        await show_user_detail(update, context, target_user_id, notice=notice)
        return

    if user and user.is_banned and not is_admin_user:
        user_data.pop("post_creation", None)
        user_data.pop("awaiting_custom_energy", None)
        await message.reply_text("üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return

    # Custom energy purchase
    if user_data.get("awaiting_custom_energy"):
        if not message.text:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ö°Ô∏è —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª.")
            return
        raw = message.text.strip()
        if raw.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
            user_data.pop("awaiting_custom_energy", None)
            await send_main_menu(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá")
            return
        try:
            amount = int(raw)
            if amount <= 0:
                raise ValueError
        except ValueError:
            await message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0, –Ω–∞–ø—Ä–∏–º–µ—Ä 150.")
            return
        if user_id is None:
            user_data.pop("awaiting_custom_energy", None)
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        user = service.get_user_balance(user_id)
        if user is None:
            user_data.pop("awaiting_custom_energy", None)
            await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return
        if user.is_banned and not is_admin_user:
            user_data.pop("awaiting_custom_energy", None)
            await message.reply_text("üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            return
        price = service.pricing.price_for_energy(amount)
        rub_total = None
        if service.current_settings:
            rub_total = service.current_settings.energy_price_per_unit * amount
        client = get_crypto_client(context)
        if client is None:
            user_data.pop("awaiting_custom_energy", None)
            await message.reply_text(
                "üí§ –ü–ª–∞—Ç—ë–∂–Ω—ã–π —à–ª—é–∑ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        try:
            invoice = await client.create_invoice(
                amount=price,
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ ({amount}‚ö°Ô∏è)",
                payload=f"energy:{user_id}:{amount}",
            )
        except CryptoPayError as exc:
            await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {exc}")
            return

        service.record_invoice(
            Invoice(
                invoice_id=invoice.invoice_id,
                user_id=user_id,
                invoice_type="energy",
                amount=invoice.amount,
                asset=invoice.asset,
                pay_url=invoice.pay_url,
                price=price,
                status=invoice.status,
                payload=invoice.payload,
                energy_amount=amount,
            )
        )

        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice.pay_url)],
                [
                    InlineKeyboardButton(
                        "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"invoice:check:{invoice.invoice_id}"
                    )
                ],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")],
            ]
        )

        amount_line = f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price:.2f} $"
        if rub_total is not None:
            amount_line += f" (~{rub_total:.2f} ‚ÇΩ)"

        await message.reply_text(
            "üí≥ –°—á—ë—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤!\n"
            f"{amount_line}\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é.",
            reply_markup=keyboard,
        )
        user_data.pop("awaiting_custom_energy", None)
        return

    # Post creation workflow
    post_state = user_data.get("post_creation")
    if isinstance(post_state, dict):
        step = post_state.get("step", "awaiting_content")
        if step == "awaiting_content":
            photo_file_id = None
            if message.photo:
                photo_file_id = message.photo[-1].file_id
                content_text = (message.caption or "").strip()
                if not content_text:
                    await message.reply_text(
                        "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ ‚Äî –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å—Ç–∞."
                    )
                    return
            else:
                content_text = (message.text or "").strip() if message.text else ""
                if not content_text:
                    await message.reply_text(
                        "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚úçÔ∏è"
                    )
                    return

            post_state.update(
                {
                    "text": content_text,
                    "photo_file_id": photo_file_id,
                    "parse_mode": "HTML",
                    "step": "awaiting_button",
                }
            )
            user_data["post_creation"] = post_state
            await message.reply_text(
                "–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ | https://example.com\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞.",
            )
            return

        if step == "awaiting_button":
            if not message.text:
                await message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ | https://–ø—Ä–∏–º–µ—Ä¬ª –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
                )
                return
            normalized = message.text.strip()
            lower = normalized.lower()
            if lower in {"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"}:
                button_text = None
                button_url = None
            else:
                if "|" not in normalized:
                    await message.reply_text(
                        "–£–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ | https://–ø—Ä–∏–º–µ—Ä¬ª."
                    )
                    return
                title, url = (part.strip() for part in normalized.split("|", 1))
                if not title or not url:
                    await message.reply_text("–¢–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                    return
                if not url.lower().startswith(("http://", "https://")):
                    await message.reply_text(
                        "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://."
                    )
                    return
                button_text = title
                button_url = url
            try:
                new_post = service.submit_post(
                    update.effective_user.id,
                    post_state["text"],
                    button_text=button_text,
                    button_url=button_url,
                    photo_file_id=post_state.get("photo_file_id"),
                    parse_mode=post_state.get("parse_mode"),
                )
            except ValueError as exc:
                await message.reply_text(f"‚ùå {exc}")
                return

            user_data.pop("post_creation", None)
            pin_text = " üìå –ü–æ—Å—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω." if new_post.requires_pin else ""
            button_note = (
                f"\nüîó –ö–Ω–æ–ø–∫–∞: {button_text} ‚Üí {button_url}"
                if button_text and button_url
                else ""
            )
            await message.reply_text(
                f"‚úÖ –ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!{pin_text}{button_note}\n"
                f"–°–ø–∏—Å–∞–Ω–æ {service.post_energy_cost} ‚ö°Ô∏è."
            )
            await send_main_menu(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá")
            return

    if user is None:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    # Fallback response
    await message.reply_text(
        "üôå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
        reply_markup=main_menu_keyboard(is_admin=is_admin_user),
    )


async def autopost_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    service = get_service(context)

    if service.is_autopost_paused():
        return

    post = service.reserve_next_post()
    if not post:
        return

    if post.post_id is None:
        LOGGER.warning("–ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å")
        return

    if TELEGRAM_CHANNEL_ID is None:
        LOGGER.warning("TELEGRAM_CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        service.set_autopost_paused(True)
        service.mark_post_failed(post.post_id)
        return

    keyboard = None
    if post.button_text and post.button_url:
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(post.button_text, url=post.button_url)]]
        )

    try:
        if post.photo_file_id:
            channel_message = await context.bot.send_photo(
                chat_id=TELEGRAM_CHANNEL_ID,
                photo=post.photo_file_id,
                caption=post.text,
                parse_mode=post.parse_mode,
                reply_markup=keyboard,
            )
        else:
            channel_message = await context.bot.send_message(
                chat_id=TELEGRAM_CHANNEL_ID,
                text=post.text,
                parse_mode=post.parse_mode,
                reply_markup=keyboard,
            )

        chat_message_id = None

        if TELEGRAM_CHAT_ID is not None:
            if post.photo_file_id:
                chat_message = await context.bot.send_photo(
                    chat_id=TELEGRAM_CHAT_ID,
                    photo=post.photo_file_id,
                    caption=post.text,
                    parse_mode=post.parse_mode,
                    reply_markup=keyboard,
                )
            else:
                chat_message = await context.bot.send_message(
                    chat_id=TELEGRAM_CHAT_ID,
                    text=post.text,
                    parse_mode=post.parse_mode,
                    reply_markup=keyboard,
                )
            chat_message_id = chat_message.message_id

        if post.requires_pin:
            try:
                await context.bot.pin_chat_message(
                    chat_id=TELEGRAM_CHANNEL_ID,
                    message_id=channel_message.message_id,
                    disable_notification=True,
                )
            except Exception as exc:  # pylint: disable=broad-except
                LOGGER.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç %s: %s", post.post_id, exc)

        service.mark_post_published(
            post.post_id,
            channel_message_id=channel_message.message_id,
            chat_message_id=chat_message_id,
        )
    except Exception as exc:  # pylint: disable=broad-except
        LOGGER.exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ %s: %s", post.post_id, exc)
        service.mark_post_failed(post.post_id)


def admin_menu_keyboard(paused: bool) -> InlineKeyboardMarkup:
    toggle_label = "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥" if paused else "‚è∏ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É"
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats"),
            ],
            [InlineKeyboardButton(toggle_label, callback_data="admin:toggle_pause")],
            [
                InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin:finance"),
                InlineKeyboardButton("üóÇ –ó–∞—è–≤–∫–∏", callback_data="admin:requests"),
            ],
            [
                InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="admin:support"),
                InlineKeyboardButton("‚öôÔ∏è –¶–µ–Ω—ã", callback_data="admin:prices"),
            ],
            [
                InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="admin:subscription"),
                InlineKeyboardButton("üí≥ CryptoPay", callback_data="admin:cryptopay"),
            ],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:refresh")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")],
        ]
    )


async def show_users_page(
    update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0
) -> None:
    service = get_service(context)
    users = sorted(service.list_users(), key=lambda u: u.user_id)
    total = len(users)
    if total == 0:
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]]
        )
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
        return

    max_page = (total - 1) // ADMIN_USERS_PAGE_SIZE
    page = max(0, min(page, max_page))
    context.user_data["admin_users_page"] = page
    start = page * ADMIN_USERS_PAGE_SIZE
    subset = users[start : start + ADMIN_USERS_PAGE_SIZE]

    admin_count = sum(1 for u in users if u.is_admin)
    banned_count = sum(1 for u in users if u.is_banned)
    lines = [
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        f"–í—Å–µ–≥–æ: {total} ‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {admin_count} ‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}",
        "",
    ]
    for user in subset:
        tags = []
        if user.is_admin:
            tags.append("admin")
        if user.is_banned:
            tags.append("ban")
        tag_str = f" [{' ‚Ä¢ '.join(tags)}]" if tags else ""
        username_display = f"@{user.username}" if user.username else "‚Äî"
        name_display = user.full_name or "‚Äî"
        lines.append(f"‚Ä¢ {user.user_id} ‚Äî {user.energy}‚ö°Ô∏è{tag_str}")
        lines.append(f"  {username_display} ‚Ä¢ {name_display}")
    lines.append(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {max_page + 1}")

    buttons = [
        [
            InlineKeyboardButton(
                f"{user.user_id} ‚Ä¢ {user.energy}‚ö°Ô∏è",
                callback_data=f"admin:user:{user.user_id}",
            )
        ]
        for user in subset
    ]

    nav: list[InlineKeyboardButton] = []
    if page > 0:
        nav.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:users:{page - 1}")
        )
    if page < max_page:
        nav.append(
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"admin:users:{page + 1}")
        )
    if nav:
        buttons.append(nav)
    buttons.append(
        [InlineKeyboardButton("üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]
    )

    text = "\n".join(lines)
    keyboard = InlineKeyboardMarkup(buttons)

    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    elif update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def show_user_detail(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    target_user_id: int,
    *,
    notice: str | None = None,
) -> None:
    service = get_service(context)
    user = service.get_user_balance(target_user_id)
    if not user:
        await update.callback_query.message.edit_text(
            "‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users")]]
            ),
        )
        return

    pending_posts = service.list_posts_for_user(user.user_id, ["pending"])
    approved_posts = service.list_posts_for_user(user.user_id, ["approved", "publishing"])

    username_display = f"@{user.username}" if user.username else "‚Äî"
    name_display = user.full_name or "‚Äî"
    lines = [
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id}",
        f"‚Ä¢ Username: {username_display}",
        f"‚Ä¢ –ò–º—è: {name_display}",
        f"‚Ä¢ ‚ö°Ô∏è –ë–∞–ª–∞–Ω—Å: {user.energy}",
        f"‚Ä¢ üåü –ó–æ–ª–æ—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {len(user.golden_cards)}",
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–∞–Ω–µ–Ω' if user.is_banned else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}",
        f"‚Ä¢ –ü—Ä–∞–≤–∞: {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else 'üôã‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}",
        f"‚Ä¢ –ü–æ—Å—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {len(pending_posts)}",
        f"‚Ä¢ –ü–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(approved_posts)}",
    ]
    if notice:
        lines.append(f"\n‚ÑπÔ∏è {notice}")

    buttons: list[list[InlineKeyboardButton]] = [
        [
            InlineKeyboardButton(
                "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                callback_data=f"admin:user:{user.user_id}:balance",
            )
        ],
        [
            InlineKeyboardButton(
                "üëë –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É" if user.is_admin else "üëë –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É",
                callback_data=f"admin:user:{user.user_id}:toggle_admin",
            )
        ],
        [
            InlineKeyboardButton(
                "üö´ –†–∞–∑–±–∞–Ω–∏—Ç—å" if user.is_banned else "üö´ –ó–∞–±–∞–Ω–∏—Ç—å",
                callback_data=f"admin:user:{user.user_id}:toggle_ban",
            )
        ],
        [
            InlineKeyboardButton(
                "üßπ –°–Ω—è—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã",
                callback_data=f"admin:user:{user.user_id}:clear_posts",
            )
        ],
    ]

    current_page = context.user_data.get("admin_users_page", 0)
    buttons.append(
        [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data=f"admin:users:{current_page}"
            )
        ]
    )
    buttons.append(
        [InlineKeyboardButton("üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]
    )

    await update.callback_query.message.edit_text(
        "\n".join(lines), reply_markup=InlineKeyboardMarkup(buttons)
    )


async def show_request_detail(
    update: Update, context: ContextTypes.DEFAULT_TYPE, index: int = 0
) -> None:
    service = get_service(context)
    pending_posts = service.list_pending_posts()
    if not pending_posts:
        await update.callback_query.message.edit_text(
            "üóÇ –ó–∞—è–≤–æ–∫ –Ω–∞ –ø–æ—Å—Ç—ã –Ω–µ—Ç.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]]
            ),
        )
        return

    max_index = len(pending_posts) - 1
    index = max(0, min(index, max_index))
    context.user_data["admin_requests_index"] = index
    post = pending_posts[index]
    author = service.get_user_balance(post.user_id)

    preview = post.text.strip()
    if len(preview) > POST_PREVIEW_LENGTH:
        preview = preview[: POST_PREVIEW_LENGTH - 3] + "..."

    lines = [
        f"üóÇ –ó–∞—è–≤–∫–∞ #{post.post_id} ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {post.user_id}",
        f"–°—Ç–∞—Ç—É—Å: {post.status}",
        f"–ë–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞: {author.energy if author else '‚Äî'} ‚ö°Ô∏è",
    ]
    if post.button_text and post.button_url:
        lines.append(f"–ö–Ω–æ–ø–∫–∞: {post.button_text} ‚Üí {post.button_url}")
    lines.append("\n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n")
    lines.append(preview or "‚Äî")
    lines.append(f"\n–ó–∞—è–≤–∫–∞ {index + 1} –∏–∑ {len(pending_posts)}")
    lines.append(
        "\n–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª: {TELEGRAM_CHANNEL_ID or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        f"‚Ä¢ –ß–∞—Ç: {TELEGRAM_CHAT_ID or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"
    )

    buttons = [
        [
            InlineKeyboardButton(
                "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                callback_data=f"admin:requests:approve:{post.post_id}:{index}",
            )
        ],
        [
            InlineKeyboardButton(
                "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"admin:requests:reject:{post.post_id}:{index}",
            )
        ],
        [
            InlineKeyboardButton(
                "üë§ –ê–≤—Ç–æ—Ä",
                callback_data=f"admin:user:{post.user_id}",
            )
        ],
    ]

    nav: list[InlineKeyboardButton] = []
    if index > 0:
        nav.append(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"admin:requests:view:{index - 1}"
            )
        )
    if index < max_index:
        nav.append(
            InlineKeyboardButton(
                "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"admin:requests:view:{index + 1}"
            )
        )
    if nav:
        buttons.append(nav)
    buttons.append(
        [InlineKeyboardButton("üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]
    )

    await update.callback_query.message.edit_text(
        "\n".join(lines), reply_markup=InlineKeyboardMarkup(buttons)
    )


async def show_admin_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    info: str | None = None,
) -> None:
    ensure_dependencies(context)
    user_id = update.effective_user.id if update.effective_user else None
    if not is_admin_id(user_id, context):
        if update.callback_query:
            await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        else:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not await ensure_subscription(update, context):
        return

    service = get_service(context)
    paused = service.is_autopost_paused()
    header = "üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
    body = info or "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
    text = header + body
    keyboard = admin_menu_keyboard(paused)

    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    elif update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    query = update.callback_query
    assert query is not None
    await query.answer()

    user_id = update.effective_user.id if update.effective_user else None
    if not is_admin_id(user_id, context):
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    if not await ensure_subscription(update, context):
        return

    parts = query.data.split(":")
    action = parts[1] if len(parts) > 1 else ""
    args = parts[2:]
    service = get_service(context)

    if action == "users":
        page = int(args[0]) if args else context.user_data.get("admin_users_page", 0)
        await show_users_page(update, context, page)
    elif action == "user":
        if not args:
            await show_users_page(update, context, context.user_data.get("admin_users_page", 0))
            return
        try:
            target_id = int(args[0])
        except ValueError:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
            return
        if len(args) == 1:
            await show_user_detail(update, context, target_id)
            return
        subaction = args[1]
        if subaction == "balance":
            context.user_data["awaiting_user_balance"] = {"user_id": target_id}
            await query.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ ‚ö°Ô∏è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º +/-, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´150¬ª –∏–ª–∏ ¬´+20¬ª.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data=f"admin:user:{target_id}",
                            )
                        ]
                    ]
                ),
            )
        elif subaction == "toggle_admin":
            user = service.get_user_balance(target_id)
            if not user:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            new_state = not user.is_admin
            service.set_user_admin(target_id, new_state)
            await query.answer(
                "–ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã" if new_state else "–ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ —Å–Ω—è—Ç—ã",
                show_alert=True,
            )
            await show_user_detail(
                update,
                context,
                target_id,
                notice="–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
            )
        elif subaction == "toggle_ban":
            user = service.get_user_balance(target_id)
            if not user:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            new_state = not user.is_banned
            service.set_user_banned(target_id, new_state)
            removed = 0
            if new_state:
                removed = service.cancel_posts_for_user(target_id)
            await query.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if new_state else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                show_alert=True,
            )
            notice = (
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã."
                if new_state and removed
                else (
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                    if not new_state
                    else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                )
            )
            await show_user_detail(update, context, target_id, notice=notice)
        elif subaction == "clear_posts":
            removed = service.cancel_posts_for_user(target_id)
            await query.answer(f"–£–¥–∞–ª–µ–Ω–æ {removed} –ø–æ—Å—Ç–æ–≤.", show_alert=True)
            await show_user_detail(
                update,
                context,
                target_id,
                notice=f"–£–¥–∞–ª–µ–Ω–æ {removed} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç(–æ–≤).",
            )
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
    elif action == "stats":
        stats = service.get_statistics()
        info = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['users']}\n"
            f"‚Ä¢ –ü–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {stats['posts_pending']}\n"
            f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats['posts_published']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['posts_total']}"
        )
        await show_admin_menu(update, context, info=info)
    elif action == "toggle_pause":
        paused = service.is_autopost_paused()
        service.set_autopost_paused(not paused)
        info = (
            "‚ñ∂Ô∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω."
            if paused
            else "‚è∏ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É."
        )
        await show_admin_menu(update, context, info=info)
    elif action == "finance":
        summary = service.get_finance_summary()
        info = (
            "üí∞ –§–∏–Ω–∞–Ω—Å—ã\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: {summary['invoices_total']}\n"
            f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {summary['invoices_paid']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã: {summary['invoices_pending']}\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {summary['revenue_collected']:.2f}\n"
            f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {summary['revenue_waiting']:.2f}"
        )
        await show_admin_menu(update, context, info=info)
    elif action == "subscription":
        settings = service.get_settings()
        context.user_data.pop("awaiting_subscription_target", None)
        requirement = settings.subscription_chat_id
        link = settings.subscription_invite_link or _subscription_link(settings)
        lines = ["üîó <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>"]
        if requirement:
            lines.append(
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: <code>{html.escape(str(requirement))}</code>"
            )
            if link:
                safe_link = html.escape(link, quote=True)
                lines.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <a href=\"{safe_link}\">{safe_link}</a>")
            lines.append("")
            lines.append(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            )
        else:
            lines.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ <b>–æ—Ç–∫–ª—é—á–µ–Ω–∞</b>.")
            lines.append("")
            lines.append("–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.")
        lines.append("")
        lines.append(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username, —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/... –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
        keyboard_rows = [
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="admin:set_subscription"
                )
            ]
        ]
        if requirement:
            keyboard_rows.append(
                [
                    InlineKeyboardButton(
                        "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="admin:clear_subscription"
                    )
                ]
            )
        keyboard_rows.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:refresh")]
        )
        await query.message.edit_text(
            "\n".join(lines),
            reply_markup=InlineKeyboardMarkup(keyboard_rows),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
    elif action == "set_subscription":
        context.user_data["awaiting_subscription_target"] = True
        await query.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞.\n"
            "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞: ¬´@channel https://t.me/channel¬ª.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:subscription")]]
            ),
        )
    elif action == "clear_subscription":
        service.update_subscription_requirement(None, None)
        await show_admin_menu(update, context, info="‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    elif action == "prices":
        settings = service.get_settings()
        info = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω\n"
            f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {settings.post_energy_cost} ‚ö°Ô∏è\n"
            f"‚Ä¢ –¶–µ–Ω–∞ 1 ‚ö°Ô∏è: {settings.energy_price_per_unit:.2f} ‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."
        )
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞", callback_data="admin:set_post_price")],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —ç–Ω–µ—Ä–≥–∏–∏", callback_data="admin:set_energy_price")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:refresh")],
            ]
        )
        await query.message.edit_text(info, reply_markup=keyboard)
    elif action == "set_post_price":
        context.user_data["awaiting_post_price"] = True
        context.user_data.pop("awaiting_energy_price", None)
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –≤ ‚ö°Ô∏è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:prices")]]
            ),
        )
    elif action == "set_energy_price":
        context.user_data["awaiting_energy_price"] = True
        context.user_data.pop("awaiting_post_price", None)
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1 ‚ö°Ô∏è –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.5).\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:prices")]]
            ),
        )
    elif action == "requests":
        if not args:
            current = context.user_data.get("admin_requests_index", 0)
            await show_request_detail(update, context, current)
            return
        subaction = args[0]
        if subaction == "view":
            index = int(args[1]) if len(args) > 1 else context.user_data.get("admin_requests_index", 0)
            await show_request_detail(update, context, index)
        elif subaction in {"approve", "reject"} and len(args) >= 3:
            try:
                post_id = int(args[1])
                index = int(args[2])
            except ValueError:
                await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
                return
            if subaction == "approve":
                result = service.approve_post(post_id)
                if result is None:
                    await query.answer("–ó–∞—è–≤–∫—É –æ–¥–æ–±—Ä–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.", show_alert=True)
                else:
                    await query.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞", show_alert=True)
            else:
                result = service.reject_post(post_id)
                if result is None:
                    await query.answer("–ó–∞—è–≤–∫—É –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.", show_alert=True)
                else:
                    await query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=True)
            await show_request_detail(update, context, index)
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
    elif action == "support":
        if not args:
            await show_admin_support_overview(update, context)
            return
        subaction = args[0]
        if subaction == "filter" and len(args) >= 2:
            target = args[1]
            if target not in {"open", "all"}:
                await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", show_alert=True)
                return
            context.user_data["admin_support_filter"] = target
            context.user_data["admin_support_page"] = 0
            await show_admin_support_overview(update, context)
        elif subaction == "page" and len(args) >= 2:
            try:
                page = int(args[1])
            except ValueError:
                await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=True)
                return
            context.user_data["admin_support_page"] = page
            await show_admin_support_overview(update, context)
        elif subaction == "view" and len(args) >= 2:
            try:
                ticket_id = int(args[1])
            except ValueError:
                await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç", show_alert=True)
                return
            await show_admin_ticket_detail(update, context, ticket_id)
        elif subaction == "reply" and len(args) >= 2:
            try:
                ticket_id = int(args[1])
            except ValueError:
                await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç", show_alert=True)
                return
            ticket = service.get_ticket(ticket_id)
            if ticket is None:
                await query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            if ticket.status != "open":
                await query.answer("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç", show_alert=True)
                return
            context.user_data["admin_ticket_reply"] = {"ticket_id": ticket_id}
            await query.message.edit_text(
                "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:support:view:{ticket_id}")]]
                ),
            )
        elif subaction in {"close", "reopen"} and len(args) >= 2:
            try:
                ticket_id = int(args[1])
            except ValueError:
                await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç", show_alert=True)
                return
            try:
                if subaction == "close":
                    service.close_ticket(ticket_id)
                    info = "‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç."
                else:
                    service.reopen_ticket(ticket_id)
                    info = "‚ôªÔ∏è –¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤–Ω–æ–≤—å."
            except ValueError as exc:
                await query.answer(str(exc), show_alert=True)
                return
            await show_admin_ticket_detail(update, context, ticket_id, info=info)
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
    elif action == "cryptopay":
        token_configured = bool(os.environ.get("CRYPTOPAY_TOKEN"))
        info = (
            "üí≥ CryptoPay\n"
            f"‚Ä¢ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if token_configured else '‚ùå'}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—á–µ—Ç–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ API CryptoBot.\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—ã."
        )
        await show_admin_menu(update, context, info=info)
    elif action == "refresh":
        await show_admin_menu(update, context, info="üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª", show_alert=True)


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    if not await ensure_subscription(update, context):
        return
    await show_admin_menu(update, context)


def main() -> None:
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN environment variable is required")
    application = (
        ApplicationBuilder()
        .token(token)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("buy_energy", buy_energy))
    application.add_handler(CommandHandler("buy_golden_card", buy_golden_card))
    application.add_handler(CommandHandler("post", post))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^admin:"))
    application.add_handler(CallbackQueryHandler(handle_support_callback, pattern="^support:"))
    application.add_handler(CallbackQueryHandler(handle_invoice_check, pattern="^invoice:check:"))
    application.add_handler(CallbackQueryHandler(handle_menu_action, pattern="^action:"))
    application.add_handler(CallbackQueryHandler(handle_energy_selection, pattern="^energy:"))
    application.add_handler(
        CallbackQueryHandler(handle_golden_payment_selection, pattern="^goldenpay:")
    )
    application.add_handler(CallbackQueryHandler(handle_golden_selection, pattern="^golden:"))
    application.add_handler(
        MessageHandler((filters.TEXT | filters.PHOTO) & ~filters.COMMAND, handle_user_message)
    )

    job_queue = application.job_queue
    job_queue.run_repeating(
        autopost_job,
        interval=AUTOPOST_INTERVAL_SECONDS,
        first=10,
        name="autopost",
    )

    LOGGER.info(
        "Bot started (autopost interval: %ss, channel: %s, chat: %s)",
        AUTOPOST_INTERVAL_SECONDS,
        TELEGRAM_CHANNEL_ID,
        TELEGRAM_CHAT_ID,
    )
    application.run_polling(close_loop=True)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
def admin_menu_keyboard(paused: bool) -> InlineKeyboardMarkup:
    toggle_label = "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥" if paused else "‚è∏ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É"
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats"),
            ],
            [InlineKeyboardButton(toggle_label, callback_data="admin:toggle_pause")],
            [
                InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin:finance"),
                InlineKeyboardButton("üóÇ –ó–∞—è–≤–∫–∏", callback_data="admin:requests"),
            ],
            [
                InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="admin:subscription"),
                InlineKeyboardButton("üí≥ CryptoPay", callback_data="admin:cryptopay"),
            ],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:refresh")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:menu")],
        ]
    )


async def show_admin_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    info: str | None = None,
) -> None:
    ensure_dependencies(context)
    user_id = update.effective_user.id if update.effective_user else None
    if not is_admin_id(user_id, context):
        if update.callback_query:
            await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        else:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not await ensure_subscription(update, context):
        return

    service = get_service(context)
    paused = service.is_autopost_paused()
    header = "üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
    body = info or "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
    text = header + body
    keyboard = admin_menu_keyboard(paused)

    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    elif update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    query = update.callback_query
    assert query is not None
    await query.answer()

    user_id = update.effective_user.id if update.effective_user else None
    if not is_admin_id(user_id, context):
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    if not await ensure_subscription(update, context):
        return

    action = query.data.split(":", 1)[1]
    service = get_service(context)

    if action == "users":
        users = service.list_users()
        total = len(users)
        referrals = sum(len(user.referred_users) for user in users)
        avg_energy = sum(user.energy for user in users) / total if total else 0
        info = (
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ: {referrals}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å —ç–Ω–µ—Ä–≥–∏–∏: {avg_energy:.1f} ‚ö°Ô∏è"
        )
        await show_admin_menu(update, context, info=info)
    elif action == "stats":
        stats = service.get_statistics()
        info = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['users']}\n"
            f"‚Ä¢ –ü–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {stats['posts_pending']}\n"
            f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats['posts_published']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['posts_total']}"
        )
        await show_admin_menu(update, context, info=info)
    elif action == "toggle_pause":
        paused = service.is_autopost_paused()
        service.set_autopost_paused(not paused)
        info = (
            "‚ñ∂Ô∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω."
            if paused
            else "‚è∏ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É."
        )
        await show_admin_menu(update, context, info=info)
    elif action == "finance":
        summary = service.get_finance_summary()
        info = (
            "üí∞ –§–∏–Ω–∞–Ω—Å—ã\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: {summary['invoices_total']}\n"
            f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {summary['invoices_paid']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã: {summary['invoices_pending']}\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {summary['revenue_collected']:.2f}\n"
            f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {summary['revenue_waiting']:.2f}"
        )
        await show_admin_menu(update, context, info=info)
    elif action == "subscription":
        settings = service.get_settings()
        context.user_data.pop("awaiting_subscription_target", None)
        requirement = settings.subscription_chat_id
        link = settings.subscription_invite_link or _subscription_link(settings)
        lines = ["üîó <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>"]
        if requirement:
            lines.append(
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: <code>{html.escape(str(requirement))}</code>"
            )
            if link:
                safe_link = html.escape(link, quote=True)
                lines.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <a href=\"{safe_link}\">{safe_link}</a>")
            lines.append("")
            lines.append(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            )
        else:
            lines.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ <b>–æ—Ç–∫–ª—é—á–µ–Ω–∞</b>.")
            lines.append("")
            lines.append("–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.")
        lines.append("")
        lines.append(
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É¬ª, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∫–∞–Ω–∞–ª, –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É."
        )
        keyboard_rows = [
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="admin:set_subscription"
                )
            ]
        ]
        if requirement:
            keyboard_rows.append(
                [
                    InlineKeyboardButton(
                        "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="admin:clear_subscription"
                    )
                ]
            )
        keyboard_rows.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:refresh")]
        )
        await query.message.edit_text(
            "\n".join(lines),
            reply_markup=InlineKeyboardMarkup(keyboard_rows),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
    elif action == "set_subscription":
        context.user_data["awaiting_subscription_target"] = True
        await query.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞.\n"
            "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´@channel https://t.me/channel¬ª.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:subscription")]]
            ),
        )
    elif action == "clear_subscription":
        service.update_subscription_requirement(None, None)
        await show_admin_menu(update, context, info="‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    elif action == "requests":
        pending_posts = service.list_pending_posts()
        if not pending_posts:
            info = "üóÇ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        else:
            preview_count = 5
            preview_lines = []
            for post in pending_posts[:preview_count]:
                snippet = post.text.strip().replace("\n", " ")
                if len(snippet) > 60:
                    snippet = snippet[:57] + "..."
                preview_lines.append(f"‚Ä¢ #{post.post_id} –æ—Ç {post.user_id}: {snippet}")
            remaining = len(pending_posts) - preview_count
            if remaining > 0:
                preview_lines.append(f"‚Ä¶ –∏ –µ—â—ë {remaining} –≤ –æ—á–µ—Ä–µ–¥–∏.")
            info = "üóÇ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã:\n" + "\n".join(preview_lines)
        await show_admin_menu(update, context, info=info)
    elif action == "cryptopay":
        token_configured = bool(os.environ.get("CRYPTOPAY_TOKEN"))
        info = (
            "üí≥ CryptoPay\n"
            f"‚Ä¢ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if token_configured else '‚ùå'}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—á–µ—Ç–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ API CryptoBot.\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—ã."
        )
        await show_admin_menu(update, context, info=info)
    elif action == "refresh":
        await show_admin_menu(update, context, info="üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª", show_alert=True)


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_dependencies(context)
    if not await ensure_subscription(update, context):
        return
    await show_admin_menu(update, context)
